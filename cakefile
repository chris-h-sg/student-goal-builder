r = require './lib/r.js'
fs = require 'fs'

task 'minify', minify = (callback) ->
  console.log "minifying..."
  options = {
    baseUrl: "./js"
    name: "main"
    out: "build/script.js"
    include: "../lib/require"
    paths: {
      'lib': '../lib',
      'html': '../html',
      text: '../lib/text',
      cs: '../lib/cs',
      'coffee-script': '../lib/coffee-script',
      'backbone': '../lib/backbone',
      'jquery': '../lib/jquery',
      'underscore': '../lib/lodash'
    },
    shim: {
      'lib/bootstrap.min.js': ['jquery'],
    }
  }
  r.optimize options, ->
    cssOptions = {
      cssIn: "css/style.css"
      out: "build/style.css"
      optimizeCss: "standard"
    }
    r.optimize cssOptions, -> callback?()


task 'merge', merge = (free = false) ->
  console.log "merging..."
  raw = fs.readFileSync('index-raw.html').toString()
  bootstrapCss = fs.readFileSync('css/bootstrap.min.css').toString()
  localCss = fs.readFileSync('build/style.css').toString()
  script = fs.readFileSync('build/script.js').toString()
  out = raw.replace /<style><\/style>/, "<style>#{bootstrapCss}#{localCss}</style>"
  parts = out.split "<script></script>"
  out = parts[0] + "<script>" + script + "</script>" + parts[1]
  fs.writeFileSync "build/report-builder#{if free then '-free' else ''}.html", out, encoding: 'UTF8'


task 'build', build = (callback) ->
  parse()
  minify ->
    merge()
    callback?()

task 'build-free', buildfree = (callback) ->
  parse true
  minify ->
    merge true
    callback?()

task 'build-all', ->
  buildfree -> build()


task 'parse', parse = (free = false) ->
  console.log "parsing..."

  textContent = (rawText) ->
    if rawText.indexOf('--') > -1
      return rawText.substring(0, rawText.indexOf '--').trim()
    return rawText.trim()

  isExcluded = (text) -> if not free then false else text.indexOf("--ex") > -1
  isIncluded = (text) -> if not free then true else text.indexOf("--in") > -1

  raw = fs.readFileSync('raw-data.txt').toString().split "\r\n"
  json = []
  lastCategory = undefined
  for row in raw when row.length > 0
    if row.match /^\d+\./
      # we're looking at a category
      numbers = row.split "."
      current = json
      done = false
      for number in numbers when not done and parseInt(number) > 0
        # traverse down the existing parents
        if current[parseInt(number) - 1]?
          parent = current[parseInt(number) - 1]
          current = parent.content
        else
          # we found an index that doesn't exist yet, that's where this category goes
          rawText = numbers[numbers.length - 1]
          lastCategory = current[parseInt(number) - 1] =
            text: textContent rawText
            content: []
            hasExcluded: false
            mayHaveChildren: isIncluded(rawText) or ((parent?.mayHaveChildren ? true) and not isExcluded rawText)
          done = true
    else if isIncluded(row) or (lastCategory.mayHaveChildren and not isExcluded row)
      lastCategory.content.push text: textContent row
    else
      lastCategory.hasExcluded = true
  fs.writeFileSync 'data/texts.json', JSON.stringify json, encoding: 'UTF8'

task 'parse-free', ->
  parse true